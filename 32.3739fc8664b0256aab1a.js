(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{CJn3:function(e,t,a){"use strict";a.r(t),a.d(t,"applyEdits",function(){return p}),a.d(t,"isEditableLayer",function(){return u});var r=a("f/qv"),s=a("srIe"),d=a("zlDU"),i=a("4EHJ"),n=a("LE9a"),l=a("jWBI"),o=a("qNUd");function u(e){var t,a;return!0===(null==e||null==(t=e.capabilities)||null==(a=t.operations)?void 0:a.supportsEditing)&&e&&(!("editingEnabled"in e)||e.editingEnabled)}async function p(e,t,a,i){let l,u;const p={edits:a,result:new Promise((e,t)=>{l=e,u=t})};e.emit("apply-edits",p);try{const{results:u,edits:p}=await async function(e,t,a,r){if(await e.load(),!function(e){return e&&null!=e.applyEdits}(t))return Promise.reject(new d.a(`${e.type}-layer:no-editing-support`,"Layer source does not support applyEdits capability",{layer:e}));if(!e.editingEnabled)throw new d.a(`${e.type}-layer:editing-disabled`,"Editing is disabled for layer",{layer:e});const i=await function(e,t,a){const r=t&&(t.addAttachments||t.updateAttachments||t.deleteAttachments);if(!(t&&(t&&(t.addFeatures||t.updateFeatures||t.deleteFeatures)||r)))throw new d.a(`${e.type}-layer:missing-parameters`,"'addFeatures', 'updateFeatures', 'deleteFeatures', 'addAttachments', 'updateAttachments' or 'deleteAttachments' parameter is required");if(!e.capabilities.data.isVersioned&&a&&a.gdbVersion)throw new d.a(`${e.type}-layer:invalid-parameter`,"'gdbVersion' is applicable only if the layer supports versioned data. See: 'capabilities.data.isVersioned'");if(!e.capabilities.editing.supportsRollbackOnFailure&&a&&a.rollbackOnFailureEnabled)throw new d.a(`${e.type}-layer:invalid-parameter`,"This layer does not support 'rollbackOnFailureEnabled' parameter. See: 'capabilities.editing.supportsRollbackOnFailure'");if(!e.capabilities.editing.supportsGlobalId&&a&&a.globalIdUsed)throw new d.a(`${e.type}-layer:invalid-parameter`,"This layer does not support 'globalIdUsed' parameter. See: 'capabilities.editing.supportsGlobalId'");if(!e.capabilities.editing.supportsGlobalId&&r)throw new d.a(`${e.type}-layer:invalid-parameter`,"'addAttachments', 'updateAttachments' and 'deleteAttachments' are applicable only if the layer supports global ids. See: 'capabilities.editing.supportsGlobalId'");if((!a||!a.globalIdUsed)&&r)throw new d.a(`${e.type}-layer:invalid-parameter`,"When 'addAttachments', 'updateAttachments' or 'deleteAttachments' is specified, globalIdUsed should be set to true");const i={...t};if(i.addFeatures=t&&n.a.isCollection(t.addFeatures)?t.addFeatures.toArray():i.addFeatures||[],i.updateFeatures=t&&n.a.isCollection(t.updateFeatures)?t.updateFeatures.toArray():i.updateFeatures||[],i.deleteFeatures=t&&n.a.isCollection(t.deleteFeatures)?t.deleteFeatures.toArray():i.deleteFeatures||[],i.addFeatures.length&&!e.capabilities.operations.supportsAdd)throw new d.a(`${e.type}-layer:unsupported-operation`,"Layer does not support adding features.");if(i.updateFeatures.length&&!e.capabilities.operations.supportsUpdate)throw new d.a(`${e.type}-layer:unsupported-operation`,"Layer does not support updating features.");if(i.deleteFeatures.length&&!e.capabilities.operations.supportsDelete)throw new d.a(`${e.type}-layer:unsupported-operation`,"Layer does not support deleting features.");i.addAttachments=i.addAttachments||[],i.updateAttachments=i.updateAttachments||[],i.deleteAttachments=i.deleteAttachments||[],i.addFeatures=i.addFeatures.map(m),i.updateFeatures=i.updateFeatures.map(m);const l=a&&a.globalIdUsed;return i.addFeatures.forEach(t=>function(e,t,a){c(e,t,a)}(t,e,l)),i.updateFeatures.forEach(t=>function(e,t,a){if(c(e,t,a),"geometry"in e&&Object(s.i)(e.geometry)&&!t.capabilities.editing.supportsGeometryUpdate)throw new d.a(`${t.type}-layer:unsupported-operation`,"Layer does not support geometry updates.")}(t,e,l)),i.deleteFeatures.forEach(t=>function(e,t,a){c(e,t,a)}(t,e,l)),i.addAttachments.forEach(t=>h(t,e)),i.updateAttachments.forEach(t=>h(t,e)),async function(e){const t=e.addFeatures,a=e.updateFeatures,r=t.concat(a).map(e=>e.geometry),s=await Object(o.a)(r),d=t.length,i=a.length;return s.slice(0,d).forEach((t,a)=>{e.addFeatures[a].geometry=t}),s.slice(d,d+i).forEach((t,a)=>{e.updateFeatures[a].geometry=t}),e}(i)}(e,a,r);return i.addFeatures.length||i.updateFeatures.length||i.deleteFeatures.length||i.addAttachments.length||i.updateAttachments.length||i.deleteAttachments.length?{edits:i,results:await t.applyEdits(i,r)}:{edits:i,results:{addFeatureResults:[],updateFeatureResults:[],deleteFeatureResults:[],addAttachmentResults:[],updateAttachmentResults:[],deleteAttachmentResults:[]}}}(e,t,a,i),y=e=>e.filter(e=>!e.error).map(r.a),b={edits:p,addedFeatures:y(u.addFeatureResults),updatedFeatures:y(u.updateFeatureResults),deletedFeatures:y(u.deleteFeatureResults),addedAttachments:y(u.addAttachmentResults),updatedAttachments:y(u.updateAttachmentResults),deletedAttachments:y(u.deleteAttachmentResults)};return(b.addedFeatures.length||b.updatedFeatures.length||b.deletedFeatures.length||b.addedAttachments.length||b.updatedAttachments.length||b.deletedAttachments.length)&&e.emit("edits",b),l(b),u}catch(y){throw u(y),y}}function c(e,t,a){if(a){if("attributes"in e&&!e.attributes[t.globalIdField])throw new d.a(`${t.type}-layer:invalid-parameter`,"Feature should have 'globalId' when 'globalIdUsed' is true");if(!("attributes"in e)&&!e.globalId)throw new d.a(`${t.type}-layer:invalid-parameter`,"'globalId' of the feature should be passed when 'globalIdUsed' is true")}if("geometry"in e&&Object(s.i)(e.geometry)){if(e.geometry.hasZ&&!1===t.capabilities.data.supportsZ)throw new d.a(`${t.type}-layer:z-unsupported`,"Layer does not support z values while feature has z values.");if(e.geometry.hasM&&!1===t.capabilities.data.supportsM)throw new d.a(`${t.type}-layer:m-unsupported`,"Layer does not support m values while feature has m values.")}}function h(e,t){const{feature:a,attachment:r}=e;if(!a||"attributes"in a&&!a.attributes[t.globalIdField])throw new d.a(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to a feature with 'globalId'");if(!("attributes"in a)&&!a.globalId)throw new d.a(`${t.type}-layer:invalid-parameter`,"Attachment should have reference to 'globalId' of the parent feature");if(!r.globalId)throw new d.a(`${t.type}-layer:invalid-parameter`,"Attachment should have 'globalId'");if(!r.data&&!r.uploadId)throw new d.a(`${t.type}-layer:invalid-parameter`,"Attachment should have 'data' or 'uploadId'");if(!(r.data instanceof File&&r.data.name||r.name))throw new d.a(`${t.type}-layer:invalid-parameter`,"'name' is required when attachment is specified as Base64 encoded string using 'data'");if(!t.capabilities.editing.supportsUploadWithItemId&&r.uploadId)throw new d.a(`${t.type}-layer:invalid-parameter`,"This layer does not support 'uploadId' parameter. See: 'capabilities.editing.supportsUploadWithItemId'");if("string"==typeof r.data){const e=Object(i.i)(r.data);if(e&&!e.isBase64)throw new d.a(`${t.type}-layer:invalid-parameter`,"Attachment 'data' should be a Blob, File or Base64 encoded string")}}function m(e){const t=new l.a;return e.attributes||(e.attributes={}),t.geometry=e.geometry,t.attributes=e.attributes,t}}}]);